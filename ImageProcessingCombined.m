%% Program Calculates the Equivalent Diameter and Area of a Bubble using Image Processing

tic                 % Start timer.
clc;                % Clear command window.
clearvars;          % Get rid of variables from prior run of this m-file.
fprintf('Processing the Images...\n');   % Message sent to command window.
workspace;          % Make sure the workspace panel with all the variables is showing.
imtool close all;   % Close all imtool figures.
format long g;
format compact;
% File Search
imFolder = '/MATLAB Drive/ImageProcessing/PERM';   % Specify the folder where the files live.
% Folder availablity check
if ~isfolder(imFolder)
    errorMessage = sprintf('Error: The following folder does not exist:\n%s\nPlease specify a new folder.', imFolder);
    uiwait(warndlg(errorMessage));
    imFolder = uigetdir(); % Ask for a new one.
    if imFolder == 0
         % User clicked Cancel
         return;
    end
end
filePattern = fullfile(imFolder, '*.bmp');
%% To get rid of the ASCII sorting
files = dir(filePattern);
numfiles = size(files,1); % Find number of files
numdelim = 1; % Number of delimiters
delims = ['.']; % Delimiters used
filenums=[ [1:numfiles]' zeros(numfiles,1) ];
for i=1:numfiles % Cycles through list of files
      rem=files(i).name;
      for j=1:numdelim % Cycles through the filename delimiters
          [token,rem] = strtok(rem,delims);
          filenums(i,j+1) = str2num(token);
      end
end
filenums = sortrows(filenums,[2:numdelim+1]);
for i=1:numfiles
      sortedfiles{i,1} = files(filenums(i,1)).name;
end

theFiles = cell2struct(sortedfiles,'name',numfiles);  % Converting the cell to a structure
[files(1:numel(theFiles)).name] = theFiles.name;      % Copying the content of a structure to another one 

%%
for z = 1 : length(files)
    baseFileName = files(z).name;
    fullFileName = fullfile(files(z).folder, baseFileName);
    fprintf(1, 'Now processing %s\n', fullFileName);
    % Image Processing Starts
    FileName = baseFileName;
    TrueColorImage = imread(FileName);
    GrayImage      = rgb2gray(TrueColorImage);       % Convert it to grayscale
    GrayImage      = medfilt2(GrayImage);            % Median Noise Reduction 
    GrayImage      = imcomplement(GrayImage);
    GrayImage      = imfill(GrayImage, 'holes');
    GrayImage      = imcomplement(GrayImage);
    
Threshold = 70;                                  % Parametric 
BinaryImage = GrayImage < Threshold;             % Choosing balck images. Uses > for bright images
BinaryImage = imfill(BinaryImage, 'holes');

% Bug Correction generated by Median Filter
BinaryImage(1:2       , 1:2)       = 0;
BinaryImage(1:2       , end-1:end) = 0;
BinaryImage(end-1:end , 1:2)       = 0;
BinaryImage(end-1:end , end-1:end) = 0;


% Labeling each blob
LabeledImage = bwlabel(BinaryImage, 8);  % The label matrix using 8-connected objects

% Get all the information about the shapes
BlobMeasure   = regionprops(LabeledImage, GrayImage, 'all');
NumberOfBlobs = size(BlobMeasure, 1);

% Plotting the borders of all the blobs
%set(gcf, 'units','normalized','outerposition',[0 0 1 1]);
fig1 = figure(1);
subplot(221), imshow(TrueColorImage), title('Original Image','FontSize', 15)
subplot(222), imshow(GrayImage),      title('Processed Image','FontSize', 15)
axis image; % Make sure image is not artificially stretched because of screen's aspect ratio.
hold on;
Boundaries = bwboundaries(BinaryImage);
NumberOfBoundaries = size(Boundaries, 1);
for k = 1 : NumberOfBoundaries
    ThisBoundary = Boundaries{k};
    plot(ThisBoundary(:,2), ThisBoundary(:,1), 'r', 'LineWidth', 2);
end
hold off;


TextFontSize = 7;	% Used to control size of "blob number" labels put atop the image.
LabelShiftX = -7;	% Used to align the labels in the centers of the blobs.
BlobECD       = zeros(1, NumberOfBlobs);
BlobEqCirleDia     = zeros(1, NumberOfBlobs);
BlobEqCirleArea    = zeros(1, NumberOfBlobs);
BlobEqElMajor    = zeros(1, NumberOfBlobs);
BlobEqElMinor    = zeros(1, NumberOfBlobs);
BlobEqElArea     = zeros(1, NumberOfBlobs);

for k = 1 : NumberOfBlobs 
    
    BlobCentroid  = BlobMeasure(k).Centroid;	            % Get centroid one at a time
       
    BlobEqCirleDia(k)    = BlobMeasure(k).EquivDiameter/44;		% Get Circle Diameter
    BlobEqCirleArea(k)   = pi*((BlobEqCirleDia(k))^2)/4;              % Get Circle Area
    
    BlobEqElMajor(k)    = BlobMeasure(k).MajorAxisLength/44;		% Elipse Major Length
    BlobEqElMinor(k)    = BlobMeasure(k).MajorAxisLength/44;		% Elipse Major Length
    BlobEqElArea(k)     = pi*BlobEqElMajor(k)*BlobEqElMinor(k)/4;     % Elipse Area
      
    text(BlobCentroid(1) + LabelShiftX, BlobCentroid(2), num2str(k), 'FontSize', TextFontSize, 'FontWeight', 'Bold','Color', 'w');

end

% To Print on a table and combine figures
BlobNumber = [1:k]'; 
Circle_Diameter = BlobEqCirleDia';
Circle_Area = BlobEqCirleArea';
Elipse_Area = BlobEqElArea';

T = table(BlobNumber,Circle_Diameter,Circle_Area,Elipse_Area);
h = subplot(2,2,[3,4]);
hPos = get(h, 'Position');
uit = uitable('Data',T{:,:},'ColumnName',T.Properties.VariableNames,...
    'RowName',T.Properties.RowNames,'Units', 'Normalized', 'Position', hPos);
set(h, 'Visible', 'Off') 
uit.ColumnName = {'Blob #','Circle Diameter [mm]','Circle Area [mm^2]','Ellipse Area [mm^2]'};

saveas(gcf,sprintf('Processed Image %02d.png',z));

DatafileName = sprintf('Processed Data %02d.dat',z);

% To save on a table 
fileID = fopen(DatafileName,'w');
fprintf(fileID,'%6s %23s %21s %22s\n','Blob #','Circle Diameter [mm]','Circle Area [mm^2]','Ellipse Area [mm^2]');
formatSpec = '%3d %18.2f %22.2f %22.2f\n';
[nrows,ncols] = size(T);
for row = 1:nrows
    fprintf(fileID,formatSpec,T{row,:});
end
fclose(fileID);



 if z == length(theFiles)
     zip('Processed',{'*.png','*.dat'});
 
 else
     continue
 end

end

toc


